name: CI

on: push

jobs:
  node-small-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - "18.x"
          - "20.x"
          - "22.x"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Prepare
        run: bash scripts/pretest/small.sh test-env/node

      - name: Test
        timeout-minutes: 1
        working-directory: test-env/node
        run: bash scripts/test.sh

  # TODO(tai-kun): Deno でのテストを追加する。
  # Deno はローカルの npm パッケージをインストールできない。

  # deno-small-tests:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 20
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       deno-version:
  #         - "v1.x"
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "22.x"

  #     - uses: denoland/setup-deno@v1
  #       with:
  #         deno-version: ${{ matrix.deno-version }}

  #     - name: Prepare
  #       run: bash scripts/pretest/small.sh test-env/deno

  #     - name: Test
  #       timeout-minutes: 1
  #       working-directory: test-env/deno
  #       run: bash scripts/test.sh

  bun-small-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        bun-version:
          - "1.1.12"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}

      - name: Prepare
        run: bash scripts/pretest/small.sh test-env/bun

      - name: Test
        timeout-minutes: 1
        working-directory: test-env/bun
        run: bash scripts/test.sh

  chrome-small-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        # https://hub.docker.com/r/selenium/standalone-chrome/tags
        browser-version:
          - "100.0"
          - "latest"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Prepare
        id: prepare
        run: |
          name="$(openssl rand -hex 12)"
          docker run --name "$name" --rm -d --network host --shm-size=2g selenium/standalone-chrome:${{ matrix.browser-version }}
          echo "selenium_container_name=$name" >>$GITHUB_OUTPUT
          bash scripts/pretest/small.sh test-env/chrome
          while ! curl --retry 5 -sSL http://localhost:4444/wd/hub/status | jq -e '.value.ready' | grep -q true; do sleep 1; done
          curl -sSL http://localhost:4444/wd/hub/status | jq -e '.value.nodes'

      - name: Test
        timeout-minutes: 1 # 1 min + overhead
        working-directory: test-env/chrome
        run: |
          bash scripts/test.sh

      - name: Cleanup
        if: always()
        run: |
          docker stop ${{ steps.prepare.outputs.selenium_container_name }} || true

  firefox-small-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        # https://hub.docker.com/r/selenium/standalone-firefox/tags
        browser-version:
          - "100.0"
          - "latest"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Prepare
        id: prepare
        run: |
          name="$(openssl rand -hex 12)"
          docker run --name "$name" --rm -d --network host --shm-size=2g selenium/standalone-firefox:${{ matrix.browser-version }}
          echo "selenium_container_name=$name" >>$GITHUB_OUTPUT
          bash scripts/pretest/small.sh test-env/firefox
          while ! curl --retry 5 -sSL http://localhost:4444/wd/hub/status | jq -e '.value.ready' | grep -q true; do sleep 1; done
          curl -sSL http://localhost:4444/wd/hub/status | jq -e '.value.nodes'

      - name: Test
        timeout-minutes: 2 # 1 min + overhead
        working-directory: test-env/firefox
        run: |
          bash scripts/test.sh

      - name: Cleanup
        if: always()
        run: |
          docker stop ${{ steps.prepare.outputs.selenium_container_name }} || true
